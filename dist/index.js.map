{"version":3,"sources":["../src/index.ts","../src/utils/get-package-info.ts","../src/commands/init.ts","../src/utils/logger.ts","../src/utils/handle-javascript-action.ts","../src/utils/handle-error.ts","../src/utils/prompt-for-components.ts","../src/utils/prepare-target-dir.ts","../src/utils/get-package-manager.ts","../src/utils/write-js-action-files.ts","../src/utils/templates.ts","../src/utils/handle-docker-actions.ts","../src/utils/write-docker-action-files.ts","../src/utils/handle-composite-action.ts"],"sourcesContent":["import { Command } from \"commander\";\r\nimport { getPackageInfo } from \"./utils/get-package-info\";\r\nimport { init } from \"./commands/init\";\r\n\r\nprocess.on(\"SIGINT\", () => process.exit(0));\r\nprocess.on(\"SIGTERM\", () => process.exit(0));\r\n\r\nasync function main() {\r\n  const packageInfo = await getPackageInfo();\r\n  const program = new Command()\r\n    .name(\"custom-gh-action\")\r\n    .description(\"create custom github action\")\r\n    .version(\r\n      packageInfo.version || \"1.0.0\",\r\n      \"-v, --version\",\r\n      \"display the version number\"\r\n    );\r\n\r\n   program.addCommand(init); \r\n   program.parse()\r\n}\r\n\r\nmain()\r\n","import path from \"path\"\r\nimport fs from \"fs-extra\"\r\nimport { type PackageJson } from \"type-fest\"\r\n\r\nexport function getPackageInfo() {\r\n  const packageJsonPath = path.join(\"package.json\")\r\n\r\n  return fs.readJSONSync(packageJsonPath) as PackageJson\r\n}\r\n","import { existsSync, promises as fs, promises } from \"fs\";\r\nimport { Command } from \"commander\";\r\nimport path from \"path\";\r\nimport prompts from \"prompts\";\r\nimport { z } from \"zod\";\r\nimport { logger } from \"../utils/logger\";\r\nimport chalk from \"chalk\";\r\nimport { TInitOptions } from \"../types\";\r\nimport { handleJavascriptAction } from \"../utils/handle-javascript-action\";\r\nimport { handleDockerAction } from \"../utils/handle-docker-actions\";\r\nimport { handleCompositeAction } from \"../utils/handle-composite-action\";\r\n\r\nconst initOptionsSchema = z.object({\r\n  cwd: z.string(),\r\n  yes: z.boolean(),\r\n  name: z.optional(z.string()),\r\n});\r\n\r\nconst custom_action = [\r\n  {\r\n    name: \"javascript\",\r\n    label: \"JavaScript\",\r\n  },\r\n  {\r\n    name: \"docker\",\r\n    label: \"Docker\",\r\n  },\r\n  {\r\n    name: \"composite\",\r\n    label: \"Composite\",\r\n  },\r\n]\r\n\r\nexport const init = new Command()\r\n  .name(\"init\")\r\n  .description(\"initialize your project and install dependencies\")\r\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\r\n  .option(\r\n    \"-c, --cwd <cwd>\",\r\n    \"the working directory. defaults to the current directory.\",\r\n    process.cwd()\r\n  )\r\n  .option(\"-n, --name <name>\", \"the name of the github action.\", \"\")\r\n  .action(async (opts) => {\r\n    try {\r\n      const options: TInitOptions = initOptionsSchema.parse(opts);\r\n      const cwd = path.resolve(options.cwd);\r\n\r\n      // Ensure target directory exists.\r\n      if (!existsSync(cwd)) {\r\n        logger.error(`The path ${cwd} does not exist. Please try again.`);\r\n        process.exit(1);\r\n      }\r\n\r\n      const config = await promptForConfig(cwd);\r\n      // Prompt for JavaScript components (if JavaScript is selected)\r\n      const isJavascript = config.custom_action === \"javascript\";\r\n      const isDocker = config.custom_action === \"docker\"\r\n      const isComposite = config.custom_action === \"composite\"\r\n\r\n      if (isJavascript) {\r\n        handleJavascriptAction(options, config, cwd)\r\n      }\r\n\r\n      if (isDocker) {\r\n        handleDockerAction(options, config)\r\n      }\r\n\r\n      if (isComposite) {\r\n        handleCompositeAction(options, config)\r\n      }\r\n\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  });\r\n\r\nexport async function promptForConfig(cwd: string, skip = false) {\r\n  const highlight = (text: string) => chalk.cyan(text);\r\n\r\n\r\n  const validateName = (name: string) => {\r\n    // Adjusted regular expression to allow underscores and hyphens\r\n    const isValid = /^[a-zA-Z0-9_-]+$/.test(name);\r\n\r\n    if (!isValid) {\r\n      console.log(\"Invalid name. The name must not contain special characters or spaces, except for underscores and hyphens.\");\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const options = await prompts([\r\n    {\r\n      type: \"text\",\r\n      name: \"action_name\",\r\n      message: `What is the name of your action? `,\r\n      validate: (name: string) => validateName(name)\r\n    },\r\n    {\r\n      type: \"select\",\r\n      name: \"custom_action\",\r\n      message: `Which ${highlight(\"custom action\")} would you like to use?`,\r\n      choices: custom_action.map((custom_action) => ({\r\n        title: custom_action.label,\r\n        value: custom_action.name,\r\n      })),\r\n    },\r\n    {\r\n      type: (prev) => (prev === \"javascript\" ? \"toggle\" : null),\r\n      name: \"typescript\",\r\n      message: `Would you like to use ${highlight(\r\n        \"TypeScript\"\r\n      )} (recommended)?`,\r\n      initial: true,\r\n      active: \"yes\",\r\n      inactive: \"no\",\r\n    }\r\n  ]);\r\n  return options;\r\n}\r\n","import chalk from \"chalk\"\r\n\r\nexport const logger = {\r\n  error(...args: unknown[]) {\r\n    console.log(chalk.red(...args))\r\n  },\r\n  warn(...args: unknown[]) {\r\n    console.log(chalk.yellow(...args))\r\n  },\r\n  info(...args: unknown[]) {\r\n    console.log(chalk.cyan(...args))\r\n  },\r\n  success(...args: unknown[]) {\r\n    console.log(chalk.green(...args))\r\n  },\r\n  break() {\r\n    console.log(\"\")\r\n  },\r\n}\r\n\r\n/* \r\nTake this as initial code:\r\n\r\nconst spinner = ora(`Installing components...`).start()\r\n        const targetDir = path.join(\r\n          // Use provided cwd if available, otherwise default to process.cwd()\r\n          options.cwd || process.cwd(),\r\n          config.action_name\r\n        );\r\n        await prepareTargetDirectory(targetDir);\r\n        const packageManager = await getPackageManager(cwd || targetDir)\r\n\r\nprepareTargetDirectory creates a dir with action_name, if it doesn;t exist.\r\nNow I want to go into that target directory, writeJson() should be invoked. */\r\n","import { execa } from \"execa\";\nimport { handleError } from \"./handle-error\";\nimport { promptForComponents } from \"./prompt-for-components\";\nimport chalk from \"chalk\";\nimport { logger } from \"./logger\";\nimport { TInitOptions } from \"../types\";\nimport prompts from \"prompts\";\nimport ora from \"ora\";\nimport path from \"path\";\nimport { prepareTargetDirectory } from \"./prepare-target-dir\";\nimport { getPackageManager } from \"./get-package-manager\";\nimport { writeJavascriptActionFiles } from \"./write-js-action-files\";\n\n\n\n\nexport async function handleJavascriptAction(options: TInitOptions, config: prompts.Answers<\"action_name\" | \"typescript\" | \"custom_action\">, cwd: string) {\n\n\n    const selectedComponents: string[] | undefined = await promptForComponents();\n    logger.info(`Selected Packages: ${chalk.green(selectedComponents)}`)\n\n\n    if (!options.yes) {\n        const { proceed } = await prompts({\n            type: \"confirm\",\n            name: \"proceed\",\n            message: `Ready to install components and dependencies. Proceed?`,\n            initial: true,\n        })\n\n        if (!proceed) {\n            process.exit(0)\n        }\n    }\n\n    const spinner = ora(`Preparing action...`).start()\n    const targetDir = path.join(\n        // Use provided cwd if available, otherwise default to process.cwd()\n        options.cwd || process.cwd(),\n        config.action_name\n    );\n    await prepareTargetDirectory(targetDir);\n    const packageManager = await getPackageManager(cwd)\n\n    // Navigate into the target directory\n    process.chdir(targetDir);\n\n    // Write package.json and tsconfig.json if applicable\n    await writeJavascriptActionFiles(config.typescript, targetDir, config.action_name);\n\n    try {\n        await execa(packageManager, [\"update\"], { cwd: targetDir });\n        logger.info(\"Updated packages\")\n    } catch (error) {\n        handleError(error)\n    }\n\n    // Installing selected packages\n    if (selectedComponents) {\n        for (const npm_package of selectedComponents) {\n            spinner.text = `Installing ${npm_package}...`;\n            try {\n                // Install package using execaCommand with target directory\n                await execa(\n                    packageManager,\n                    [\n                        packageManager === \"npm\" ? \"install\" : \"add\",\n                        npm_package,\n                    ]\n                )\n            } catch (error) {\n                handleError(error)\n            }\n        }\n    }\n    spinner.succeed(`Done.`)\n\n    logger.info(\"\");\n      logger.info(\n        `${chalk.green(\n          \"Success!\"\n        )} Project initialization completed. You may now modify your action`\n      );\n      logger.info(\"\");\n} ","import { logger } from \"./logger\"\n\nexport function handleError(error: unknown) {\n  if (typeof error === \"string\") {\n    logger.error(error)\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message)\n    process.exit(1)\n  }\n\n  logger.error(\"Something went wrong. Please try again.\")\n  process.exit(1)\n}","import prompts from \"prompts\"\n\nconst dependencies = [\n    \"@octokit/core\",\n    \"@actions/core\",\n    \"@actions/github\",\n    \"jest\",\n    \"axios\",\n    \"node-fetch\"\n]\n\nexport async function promptForComponents() {\n\n\n    const choices = dependencies.map((entry) => ({\n        title: entry,\n        value: entry,\n        selected: false, // Initially deselect all components\n    }));\n\n    const response = await prompts({\n        type: \"multiselect\",\n        name: \"components\",\n        message: \"Which packages would you like to add?\",\n        hint: \"Space to select. A to toggle all. Enter to submit.\",\n        instructions: false,\n        choices,\n    });\n\n    return response.components; // Return the selected components\n}","import { existsSync, promises } from \"fs\";\nimport { logger } from \"./logger\";\n\nexport async function prepareTargetDirectory(targetDir: string) {\n\n  if (existsSync(targetDir)) {\n    const files = await promises.readdir(targetDir);\n    if (files.length > 0) {\n      logger.error(`Target directory ${targetDir} is not empty. Please try again.`);\n      process.exit(1);\n    }\n  } else {\n    await promises.mkdir(targetDir);\n  }\n}","import {detect} from \"@antfu/ni\"\r\n\r\nexport async function getPackageManager(\r\n    targetDir: string\r\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\"> {\r\n    const packageManager = await detect({programmatic:true,cwd:targetDir})\r\n\r\n    if (packageManager === \"yarn@berry\") return \"yarn\"\r\n    if (packageManager === \"pnpm@6\") return \"pnpm\"\r\n    if (packageManager === \"bun\") return \"bun\"\r\n\r\n    return packageManager ?? \"npm\"\r\n}","import { promises } from \"fs\";\nimport path from \"path\";\nimport { JAVASCRIPT_PACKAGE_JSON, TYPESCRIPT_JSON_TEMPLATE, TYPESCRIPT_PACKAGE_JSON, JAVASCRIPT_YAML_TEMPLATE, GITIGNORE } from \"./templates\";\nimport { logger } from \"./logger\";\n\nexport async function writeJavascriptActionFiles(isTypescript: boolean, targetDir: string, action_name: string) {\n    try {\n        // Write .gitignore\n        await promises.writeFile(path.join(targetDir,\".gitignore\"),GITIGNORE)\n\n\n        // Write action.yaml \n        const javascriptYAMLContent = JAVASCRIPT_YAML_TEMPLATE(action_name)\n        const javascriptYAMLPath = path.join(targetDir, \"action.yaml\");\n        await promises.writeFile(javascriptYAMLPath, javascriptYAMLContent);\n        logger.info(\"action.yaml file created successfully.\");\n\n        // Ensure src directory exists\n        const srcDir = path.join(targetDir, \"src\");\n        await promises.mkdir(srcDir, { recursive: true }); // Ensure the src directory and its parent directories are created\n\n        // Write source file (JavaScript or TypeScript)\n        const sourceFileContent = 'console.log(\"Hello custom github action\");';\n        const sourceFilePath = path.join(targetDir, \"src\", `${action_name}.${isTypescript ? \"ts\" : \"js\"}`);\n        await promises.writeFile(sourceFilePath, sourceFileContent);\n        logger.info(`src/${action_name}.${isTypescript ? \"ts\" : \"js\"} file created successfully.`);\n\n\n        // Write package.json file\n        const packageJsonContent = isTypescript ? TYPESCRIPT_PACKAGE_JSON(action_name) : JAVASCRIPT_PACKAGE_JSON(action_name);\n        const packageJsonPath = path.join(targetDir, \"package.json\");\n        await promises.writeFile(packageJsonPath, packageJsonContent);\n        logger.info(\"package.json file created successfully.\");\n\n        // Write tsconfig.json file if TypeScript is used\n        if (isTypescript) {\n            const tsconfigJsonPath = path.join(targetDir, \"tsconfig.json\");\n            await promises.writeFile(tsconfigJsonPath, TYPESCRIPT_JSON_TEMPLATE);\n            logger.info(\"tsconfig.json file created successfully.\");\n        }\n    } catch (error) {\n        logger.error(\"Error writing files:\", error);\n    }\n}","export const GITIGNORE = `# Node.js and npm\nnode_modules/\nnpm-debug.log\n*.log\nyarn-error.log\n\n# Dependency directories\njspm_packages/\nbower_components/\n\n# Typescript\n*.tsbuildinfo\n\n# IDEs and editors\n.vscode/\n.idea/\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n.DS_Store\n\n# Docker\n.dockerignore\n.docker/\n\n# Build files\n/dist\n/out\n/.ncc\n\n# Environment variables file\n.env\n.env.local\n.env.*.local\n!.env.example\n\n# Log files\n*.log\nlogs/\n*.log.*\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log\n`\n\nexport const JAVASCRIPT_YAML_TEMPLATE = (action_name: string) => {\n  return `name: ${action_name}\ndescription: ${action_name}\n    \nruns:\n  using: 'node16'\n  main: 'dist/index.js'`\n}\n\nexport const TYPESCRIPT_JSON_TEMPLATE = `{\n    \"compilerOptions\": {\n      \"target\": \"es2019\", // Or \"esnext\" for the latest\n      \"module\": \"esnext\", // Or any of the allowed values per your environment\n      \"outDir\": \"lib\",\n      \"esModuleInterop\": true,\n      \"forceConsistentCasingInFileNames\": true,\n      \"strict\": true,\n      \"skipLibCheck\": true,\n      \"moduleResolution\": \"node\"\n    }\n  }`\n\nexport const JAVASCRIPT_PACKAGE_JSON = (action_name: string) => {\n  return `{\n    \"name\": \"${action_name}\",\n    \"version\": \"0.0.1\",\n    \"description\": \"\",\n    \"main\": \"dist/index.js\",\n    \"scripts\": {\n      \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\",\n      \"build\": \"ncc build lib/${action_name}.js\"\n    },\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n      \"@types/node\": \"^20.10.8\",\n      \"typescript\": \"^5.3.3\",\n      \"@vercel/ncc\": \"^0.38.1\"\n    },\n    \"dependencies\": {\n    }\n  }`\n}\n\nexport const TYPESCRIPT_PACKAGE_JSON = (action_name: string) => {\n  return `{\n    \"name\": \"${action_name}\",\n    \"version\": \"0.0.1\",\n    \"description\": \"\",\n    \"main\": \"dist/index.js\",\n    \"scripts\": {\n      \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\",\n      \"build\": \"tsc && ncc build lib/${action_name}.js\"\n    },\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n      \"@types/node\": \"^20.10.8\",\n      \"typescript\": \"^5.3.3\",\n      \"@vercel/ncc\": \"^0.38.1\"\n    },\n    \"dependencies\": {\n    }\n  }`\n}\n\nexport const DOCKER_ACTION_TEMPLATE = (action_name: string) => {\n  return `name: ${action_name}\ndescription: ${action_name}\n    \nruns:\n  using: 'docker'\n  main: 'Dockerfile'\n  args:\n    -`\n}\n\nexport const DOCKERFILE = `FROM alpine:latest\n\nENTRYPOINT ['/entrypoint.sh']`\n\nexport const COMPOSITE_ACTION_TEMPLATE = (action_name: string) => {\n  return `name: '${action_name}'\ndescription: '${action_name}'\n\nruns:\n  using: \"composite\"\n  steps:\n    - name: Set Greeting\n      run: echo \"Hello custom github action\"\n      shell: bash\n      env:`\n}\n","import ora from \"ora\";\nimport { TInitOptions } from \"../types\";\nimport prompts from \"prompts\";\nimport path from \"path\";\nimport { prepareTargetDirectory } from \"./prepare-target-dir\";\nimport { writeDockerActionFiles } from \"./write-docker-action-files\";\nimport { logger } from \"./logger\";\nimport chalk from \"chalk\";\n\nexport async function handleDockerAction(options: TInitOptions, config: prompts.Answers<\"action_name\" | \"typescript\" | \"custom_action\">) {\n    const spinner = ora(`Preparing action...`).start()\n    const targetDir = path.join(\n        // Use provided cwd if available, otherwise default to process.cwd()\n        options.cwd || process.cwd(),\n        config.action_name\n    );\n    await prepareTargetDirectory(targetDir);\n\n\n    // Navigate into the target directory\n    process.chdir(targetDir);\n\n    // Write action.yaml and Dockerfile\n    await writeDockerActionFiles(targetDir, config.action_name)\n\n    spinner.succeed(`Done.`)\n\n    logger.info(\"\");\n    logger.info(\n        `${chalk.green(\n            \"Success!\"\n        )} Project initialization completed. You may now modify your action`\n    );\n    logger.info(\"\");\n}","import { promises } from \"fs\";\nimport path from \"path\";\nimport { DOCKERFILE, DOCKER_ACTION_TEMPLATE, GITIGNORE } from \"./templates\";\nimport { logger } from \"./logger\";\n\nexport async function writeDockerActionFiles(targetDir: string, action_name: string) {\n    try {\n        // Write .gitignore\n        await promises.writeFile(path.join(targetDir,\".gitignore\"),GITIGNORE)\n\n        // Write action.yaml \n        const dockerYAMLContent = DOCKER_ACTION_TEMPLATE(action_name)\n        const dockerYAMLPath = path.join(targetDir, \"action.yaml\");\n        await promises.writeFile(dockerYAMLPath, dockerYAMLContent);\n        logger.info(\"action.yaml file created successfully.\");\n        \n        // Write Dockerfile\n        const dockerfileContent = DOCKERFILE\n        const dockerfilePath = path.join(targetDir, \"Dockerfile\");\n        await promises.writeFile(dockerfilePath, dockerfileContent);\n        logger.info(\"Dockerfile created successfully.\");\n    } catch (error) {\n        logger.error(\"Error writing Dockerfile\", error);\n    }\n}","import prompts from \"prompts\";\nimport { TInitOptions } from \"../types\";\nimport ora from \"ora\";\nimport path from \"path\";\nimport { prepareTargetDirectory } from \"./prepare-target-dir\";\nimport { promises } from \"fs\";\nimport { COMPOSITE_ACTION_TEMPLATE, GITIGNORE } from \"./templates\";\nimport { logger } from \"./logger\";\nimport chalk from \"chalk\";\n\nexport async function handleCompositeAction(options: TInitOptions, config: prompts.Answers<\"action_name\" | \"typescript\" | \"custom_action\">) {\n    const spinner = ora(`Preparing action...`).start()\n    const targetDir = path.join(\n        // Use provided cwd if available, otherwise default to process.cwd()\n        options.cwd || process.cwd(),\n        config.action_name\n    );\n    await prepareTargetDirectory(targetDir);\n\n    // Navigate into the target directory\n    process.chdir(targetDir);\n\n    try {\n        // Write .gitignore\n        await promises.writeFile(path.join(targetDir, \".gitignore\"), GITIGNORE)\n\n        // Write action.yaml \n        const compositeYAMLContent = COMPOSITE_ACTION_TEMPLATE(config.action_name)\n        const compositeYAMLPath = path.join(targetDir, \"action.yaml\");\n        await promises.writeFile(compositeYAMLPath, compositeYAMLContent);\n        logger.info(\"Composite action.yaml file created successfully.\");\n    } catch (error) {\n        logger.error(\"Error writing Dockerfile\", error);\n    }\n\n    spinner.succeed(`Done.`)\n\n    logger.info(\"\");\n    logger.info(\n        `${chalk.green(\n            \"Success!\"\n        )} Project initialization completed. You may now modify your action`\n    );\n    logger.info(\"\");\n}"],"mappings":"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","names":["Command","path","fs","getPackageInfo","packageJsonPath","existsSync","Command","path","prompts","z","chalk","logger","args","chalk","execa","handleError","error","logger","prompts","dependencies","promptForComponents","choices","entry","chalk","prompts","ora","path","existsSync","promises","prepareTargetDirectory","targetDir","existsSync","promises","logger","detect","getPackageManager","targetDir","packageManager","promises","path","GITIGNORE","JAVASCRIPT_YAML_TEMPLATE","action_name","TYPESCRIPT_JSON_TEMPLATE","JAVASCRIPT_PACKAGE_JSON","TYPESCRIPT_PACKAGE_JSON","DOCKER_ACTION_TEMPLATE","DOCKERFILE","COMPOSITE_ACTION_TEMPLATE","writeJavascriptActionFiles","isTypescript","targetDir","action_name","promises","path","GITIGNORE","javascriptYAMLContent","JAVASCRIPT_YAML_TEMPLATE","javascriptYAMLPath","logger","srcDir","sourceFileContent","sourceFilePath","packageJsonContent","TYPESCRIPT_PACKAGE_JSON","JAVASCRIPT_PACKAGE_JSON","packageJsonPath","tsconfigJsonPath","TYPESCRIPT_JSON_TEMPLATE","error","handleJavascriptAction","options","config","cwd","selectedComponents","promptForComponents","logger","chalk","proceed","prompts","spinner","ora","targetDir","path","prepareTargetDirectory","packageManager","getPackageManager","writeJavascriptActionFiles","execa","error","handleError","npm_package","ora","path","promises","path","writeDockerActionFiles","targetDir","action_name","promises","path","GITIGNORE","dockerYAMLContent","DOCKER_ACTION_TEMPLATE","dockerYAMLPath","logger","dockerfileContent","DOCKERFILE","dockerfilePath","error","chalk","handleDockerAction","options","config","spinner","ora","targetDir","path","prepareTargetDirectory","writeDockerActionFiles","logger","ora","path","promises","chalk","handleCompositeAction","options","config","spinner","ora","targetDir","path","prepareTargetDirectory","promises","GITIGNORE","compositeYAMLContent","COMPOSITE_ACTION_TEMPLATE","compositeYAMLPath","logger","error","initOptionsSchema","z","custom_action","init","Command","opts","options","cwd","path","existsSync","logger","config","promptForConfig","isJavascript","isDocker","isComposite","handleJavascriptAction","handleDockerAction","handleCompositeAction","error","skip","highlight","text","chalk","validateName","name","prompts","prev","main","packageInfo","getPackageInfo","program","Command","init"]}