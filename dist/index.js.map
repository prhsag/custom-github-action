{"version":3,"sources":["../src/index.ts","../src/utils/get-package-info.ts","../src/commands/init.ts","../src/utils/logger.ts","../src/utils/prompt-for-components.ts","../src/utils/prepare-target-dir.ts","../src/utils/get-package-manager.ts","../src/utils/write-js-action-files.ts","../src/utils/templates.ts","../src/utils/handle-error.ts"],"sourcesContent":["import { Command } from \"commander\";\r\nimport { getPackageInfo } from \"./utils/get-package-info\";\r\nimport { init } from \"./commands/init\";\r\n\r\nprocess.on(\"SIGINT\", () => process.exit(0));\r\nprocess.on(\"SIGTERM\", () => process.exit(0));\r\n\r\nasync function main() {\r\n  const packageInfo = await getPackageInfo();\r\n  const program = new Command()\r\n    .name(\"custom-gh-action\")\r\n    .description(\"create custom github action\")\r\n    .version(\r\n      packageInfo.version || \"1.0.0\",\r\n      \"-v, --version\",\r\n      \"display the version number\"\r\n    );\r\n\r\n   program.addCommand(init); \r\n   program.parse()\r\n}\r\n\r\nmain()\r\n","import path from \"path\"\r\nimport fs from \"fs-extra\"\r\nimport { type PackageJson } from \"type-fest\"\r\n\r\nexport function getPackageInfo() {\r\n  const packageJsonPath = path.join(\"package.json\")\r\n\r\n  return fs.readJSONSync(packageJsonPath) as PackageJson\r\n}\r\n","import { existsSync, promises as fs, promises } from \"fs\";\r\nimport { Command } from \"commander\";\r\nimport path from \"path\";\r\nimport prompts from \"prompts\";\r\nimport { z } from \"zod\";\r\nimport { logger } from \"../utils/logger\";\r\nimport chalk from \"chalk\";\r\nimport { promptForComponents } from \"../utils/prompt-for-components\";\r\nimport ora from \"ora\";\r\nimport { prepareTargetDirectory } from \"../utils/prepare-target-dir\";\r\nimport { execa } from \"execa\"\r\nimport { getPackageManager } from \"../utils/get-package-manager\";\r\nimport { writeJavascriptActionFiles } from \"../utils/write-js-action-files\";\r\nimport { handleError } from \"../utils/handle-error\";\r\n\r\nconst initOptionsSchema = z.object({\r\n  cwd: z.string(),\r\n  yes: z.boolean(),\r\n  name: z.optional(z.string()),\r\n});\r\n\r\nconst custom_action = [\r\n  {\r\n    name: \"javascript\",\r\n    label: \"JavaScript\",\r\n  },\r\n  {\r\n    name: \"docker\",\r\n    label: \"Docker\",\r\n  },\r\n  {\r\n    name: \"composite\",\r\n    label: \"Composite\",\r\n  },\r\n]\r\n\r\nexport const init = new Command()\r\n  .name(\"init\")\r\n  .description(\"initialize your project and install dependencies\")\r\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\r\n  .option(\r\n    \"-c, --cwd <cwd>\",\r\n    \"the working directory. defaults to the current directory.\",\r\n    process.cwd()\r\n  )\r\n  .option(\"-n, --name <name>\", \"the name of the github action.\", \"\")\r\n  .action(async (opts) => {\r\n    try {\r\n      const options = initOptionsSchema.parse(opts);\r\n      const cwd = path.resolve(options.cwd);\r\n\r\n      // Ensure target directory exists.\r\n      if (!existsSync(cwd)) {\r\n        logger.error(`The path ${cwd} does not exist. Please try again.`);\r\n        process.exit(1);\r\n      }\r\n\r\n      const config = await promptForConfig(cwd);\r\n      // Prompt for JavaScript components (if JavaScript is selected)\r\n      const isJavascript = config.custom_action === \"javascript\";\r\n      const isDocker = config.custom_action === \"docker\"\r\n      const isComposite = config.custom_action === \"composite\"\r\n    \r\n      if (isJavascript) {\r\n        const selectedComponents: string[] | undefined = await promptForComponents(isJavascript);\r\n        logger.info(`Selected Packages: ${chalk.green(selectedComponents)}`)\r\n\r\n        if (!selectedComponents?.length) {\r\n          logger.warn(\"No packages selected. Exiting.\")\r\n          process.exit(0)\r\n        }\r\n\r\n        if (!options.yes) {\r\n          const { proceed } = await prompts({\r\n            type: \"confirm\",\r\n            name: \"proceed\",\r\n            message: `Ready to install components and dependencies. Proceed?`,\r\n            initial: true,\r\n          })\r\n\r\n          if (!proceed) {\r\n            process.exit(0)\r\n          }\r\n        }\r\n\r\n        const spinner = ora(`Preparing action...`).start()\r\n        const targetDir = path.join(\r\n          // Use provided cwd if available, otherwise default to process.cwd()\r\n          options.cwd || process.cwd(),\r\n          config.action_name\r\n        );\r\n        await prepareTargetDirectory(targetDir);\r\n        const packageManager = await getPackageManager(cwd || targetDir)\r\n\r\n        // Navigate into the target directory\r\n        process.chdir(targetDir);\r\n\r\n        // Write package.json and tsconfig.json if applicable\r\n        await writeJavascriptActionFiles(config.typescript, targetDir,config.action_name);\r\n\r\n        try {\r\n          await execa(packageManager, [\"update\"], { cwd: targetDir });\r\n          logger.info(\"Updated packages\")\r\n        } catch (error) {\r\n          handleError(error)\r\n        }\r\n\r\n\r\n        // Installating selected \r\n        for (const npm_package of selectedComponents) {\r\n          spinner.text = `Installing ${npm_package}...`;\r\n          try {\r\n            // Install package using execaCommand with target directory\r\n            await execa(\r\n              packageManager,\r\n              [\r\n                packageManager === \"npm\" ? \"install\" : \"add\",\r\n                npm_package,\r\n              ]\r\n            )\r\n          } catch (error) {\r\n            handleError(error)\r\n          }\r\n        }\r\n        spinner.succeed(`Done.`)\r\n      }\r\n\r\n      logger.info(\"\");\r\n      logger.info(\r\n        `${chalk.green(\r\n          \"Success!\"\r\n        )} Project initialization completed. You may now modify your action`\r\n      );\r\n      logger.info(\"\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  });\r\n\r\nexport async function promptForConfig(cwd: string, skip = false) {\r\n  const highlight = (text: string) => chalk.cyan(text);\r\n\r\n\r\n  const validateName = (name: string) => {\r\n    // Adjusted regular expression to allow underscores and hyphens\r\n    const isValid = /^[a-zA-Z0-9_-]+$/.test(name);\r\n\r\n    if (!isValid) {\r\n      console.log(\"Invalid name. The name must not contain special characters or spaces, except for underscores and hyphens.\");\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const options = await prompts([\r\n    {\r\n      type: \"text\",\r\n      name: \"action_name\",\r\n      message: `What is the name of your action? `,\r\n      validate: (name: string) => validateName(name)\r\n    },\r\n    {\r\n      type: \"select\",\r\n      name: \"custom_action\",\r\n      message: `Which ${highlight(\"custom action\")} would you like to use?`,\r\n      choices: custom_action.map((custom_action) => ({\r\n        title: custom_action.label,\r\n        value: custom_action.name,\r\n      })),\r\n    },\r\n    {\r\n      type: (prev) => (prev === \"javascript\" ? \"toggle\" : null),\r\n      name: \"typescript\",\r\n      message: `Would you like to use ${highlight(\r\n        \"TypeScript\"\r\n      )} (recommended)?`,\r\n      initial: true,\r\n      active: \"yes\",\r\n      inactive: \"no\",\r\n    }\r\n  ]);\r\n\r\n\r\n  if (!skip && options.custom_action !== \"javascript\") {\r\n    const { proceed } = await prompts({\r\n      type: \"confirm\",\r\n      name: \"proceed\",\r\n      message: `Do you want to ${highlight(\r\n        \"proceed\"\r\n      )}. Proceed?`,\r\n      initial: true,\r\n    })\r\n\r\n    if (!proceed) {\r\n      process.exit(0)\r\n    }\r\n  }\r\n\r\n  return options;\r\n}\r\n","import chalk from \"chalk\"\r\n\r\nexport const logger = {\r\n  error(...args: unknown[]) {\r\n    console.log(chalk.red(...args))\r\n  },\r\n  warn(...args: unknown[]) {\r\n    console.log(chalk.yellow(...args))\r\n  },\r\n  info(...args: unknown[]) {\r\n    console.log(chalk.cyan(...args))\r\n  },\r\n  success(...args: unknown[]) {\r\n    console.log(chalk.green(...args))\r\n  },\r\n  break() {\r\n    console.log(\"\")\r\n  },\r\n}\r\n\r\n/* \r\nTake this as initial code:\r\n\r\nconst spinner = ora(`Installing components...`).start()\r\n        const targetDir = path.join(\r\n          // Use provided cwd if available, otherwise default to process.cwd()\r\n          options.cwd || process.cwd(),\r\n          config.action_name\r\n        );\r\n        await prepareTargetDirectory(targetDir);\r\n        const packageManager = await getPackageManager(cwd || targetDir)\r\n\r\nprepareTargetDirectory creates a dir with action_name, if it doesn;t exist.\r\nNow I want to go into that target directory, writeJson() should be invoked. */\r\n","import prompts from \"prompts\"\n\nconst dependencies = [\n    \"@octokit/core\",\n    \"@actions/core\",\n    \"@actions/github\",\n    \"axios\",\n    \"node-fetch\"\n]\n\nexport async function promptForComponents(isJavascript: boolean) {\n    if (!isJavascript) {\n        return; // No components prompt for non-JavaScript actions\n    }\n\n    const choices = dependencies.map((entry) => ({\n        title: entry,\n        value: entry,\n        selected: false, // Initially deselect all components\n    }));\n\n    const response = await prompts({\n        type: \"multiselect\",\n        name: \"components\",\n        message: \"Which packages would you like to add?\",\n        hint: \"Space to select. A to toggle all. Enter to submit.\",\n        instructions: false,\n        choices,\n    });\n\n    return response.components; // Return the selected components\n}","import { existsSync, promises } from \"fs\";\nimport { logger } from \"./logger\";\n\nexport async function prepareTargetDirectory(targetDir: string) {\n\n  if (existsSync(targetDir)) {\n    const files = await promises.readdir(targetDir);\n    if (files.length > 0) {\n      logger.error(`Target directory ${targetDir} is not empty. Please try again.`);\n      process.exit(1);\n    }\n  } else {\n    await promises.mkdir(targetDir);\n  }\n}","import {detect} from \"@antfu/ni\"\r\n\r\nexport async function getPackageManager(\r\n    targetDir: string\r\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\"> {\r\n    const packageManager = await detect({programmatic:true,cwd:targetDir})\r\n\r\n    if (packageManager === \"yarn@berry\") return \"yarn\"\r\n    if (packageManager === \"pnpm@6\") return \"pnpm\"\r\n    if (packageManager === \"bun\") return \"bun\"\r\n\r\n    return packageManager ?? \"npm\"\r\n}","import { promises } from \"fs\";\nimport path from \"path\";\nimport { JAVASCRIPT_PACKAGE_JSON, TYPESCRIPT_JSON_TEMPLATE, TYPESCRIPT_PACKAGE_JSON, JAVASCRIPT_YAML_TEMPLATE, GITIGNORE } from \"./templates\";\nimport { logger } from \"./logger\";\n\nexport async function writeJavascriptActionFiles(isTypescript: boolean, targetDir: string, action_name: string) {\n    try {\n        // Write .gitignore\n        await promises.writeFile(path.join(targetDir,\".gitignore\"),GITIGNORE)\n\n\n        // Write action.yaml \n        const javascriptYAMLContent = JAVASCRIPT_YAML_TEMPLATE(action_name)\n        const javascriptYAMLPath = path.join(targetDir, \"action.yaml\");\n        await promises.writeFile(javascriptYAMLPath, javascriptYAMLContent);\n        logger.info(\"action.yaml file created successfully.\");\n\n        // Ensure src directory exists\n        const srcDir = path.join(targetDir, \"src\");\n        await promises.mkdir(srcDir, { recursive: true }); // Ensure the src directory and its parent directories are created\n\n        // Write source file (JavaScript or TypeScript)\n        const sourceFileContent = 'console.log(\"Hello custom github action\");';\n        const sourceFilePath = path.join(targetDir, \"src\", `${action_name}.${isTypescript ? \"ts\" : \"js\"}`);\n        await promises.writeFile(sourceFilePath, sourceFileContent);\n        logger.info(`src/${action_name}.${isTypescript ? \"ts\" : \"js\"} file created successfully.`);\n\n\n        // Write package.json file\n        const packageJsonContent = isTypescript ? TYPESCRIPT_PACKAGE_JSON(action_name) : JAVASCRIPT_PACKAGE_JSON(action_name);\n        const packageJsonPath = path.join(targetDir, \"package.json\");\n        await promises.writeFile(packageJsonPath, packageJsonContent);\n        logger.info(\"package.json file created successfully.\");\n\n        // Write tsconfig.json file if TypeScript is used\n        if (isTypescript) {\n            const tsconfigJsonPath = path.join(targetDir, \"tsconfig.json\");\n            await promises.writeFile(tsconfigJsonPath, TYPESCRIPT_JSON_TEMPLATE);\n            logger.info(\"tsconfig.json file created successfully.\");\n        }\n    } catch (error) {\n        logger.error(\"Error writing JSON files:\", error);\n    }\n}","export const GITIGNORE=`# Node.js and npm\nnode_modules/\nnpm-debug.log\n*.log\nyarn-error.log\n\n# Dependency directories\njspm_packages/\nbower_components/\n\n# Typescript\n*.tsbuildinfo\n\n# IDEs and editors\n.vscode/\n.idea/\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n.DS_Store\n\n# Docker\n.dockerignore\n.docker/\n\n# Build files\n/dist\n/out\n/.ncc\n\n# Environment variables file\n.env\n.env.local\n.env.*.local\n!.env.example\n\n# Log files\n*.log\nlogs/\n*.log.*\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log\n`\n\n\nexport const JAVASCRIPT_YAML_TEMPLATE = (action_name:string) => {\n  return `name: ${action_name}\ndescription: ${action_name}\n    \nruns:\n  using: 'node16'\n  main: 'dist/index.js'`\n}\n\nexport const TYPESCRIPT_JSON_TEMPLATE = `{\n    \"compilerOptions\": {\n      \"target\": \"es2019\", // Or \"esnext\" for the latest\n      \"module\": \"esnext\", // Or any of the allowed values per your environment\n      \"outDir\": \"lib\",\n      \"esModuleInterop\": true,\n      \"forceConsistentCasingInFileNames\": true,\n      \"strict\": true,\n      \"skipLibCheck\": true,\n      \"moduleResolution\": \"node\"\n    }\n  }`\n\nexport const JAVASCRIPT_PACKAGE_JSON = (action_name: string) => {\n  return `{\n    \"name\": \"${action_name}\",\n    \"version\": \"0.0.1\",\n    \"description\": \"\",\n    \"main\": \"dist/index.js\",\n    \"scripts\": {\n      \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\",\n      \"build\": \"ncc build lib/${action_name}.js\"\n    },\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n      \"@types/node\": \"^20.10.8\",\n      \"typescript\": \"^5.3.3\",\n      \"@vercel/ncc\": \"^0.38.1\"\n    },\n    \"dependencies\": {\n    }\n  }`\n}\n\nexport const TYPESCRIPT_PACKAGE_JSON = (action_name: string) => {\n  return `{\n    \"name\": \"${action_name}\",\n    \"version\": \"0.0.1\",\n    \"description\": \"\",\n    \"main\": \"dist/index.js\",\n    \"scripts\": {\n      \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\",\n      \"build\": \"tsc && ncc build lib/${action_name}.js\"\n    },\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n      \"@types/node\": \"^20.10.8\",\n      \"typescript\": \"^5.3.3\",\n      \"@vercel/ncc\": \"^0.38.1\"\n    },\n    \"dependencies\": {\n    }\n  }`\n}\n","import { logger } from \"./logger\"\n\nexport function handleError(error: unknown) {\n  if (typeof error === \"string\") {\n    logger.error(error)\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message)\n    process.exit(1)\n  }\n\n  logger.error(\"Something went wrong. Please try again.\")\n  process.exit(1)\n}"],"mappings":"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","names":["Command","path","fs","getPackageInfo","packageJsonPath","existsSync","Command","path","prompts","z","chalk","logger","args","chalk","prompts","dependencies","promptForComponents","isJavascript","choices","entry","ora","existsSync","promises","prepareTargetDirectory","targetDir","existsSync","promises","logger","execa","detect","getPackageManager","targetDir","packageManager","promises","path","GITIGNORE","JAVASCRIPT_YAML_TEMPLATE","action_name","TYPESCRIPT_JSON_TEMPLATE","JAVASCRIPT_PACKAGE_JSON","TYPESCRIPT_PACKAGE_JSON","writeJavascriptActionFiles","isTypescript","targetDir","action_name","promises","path","GITIGNORE","javascriptYAMLContent","JAVASCRIPT_YAML_TEMPLATE","javascriptYAMLPath","logger","srcDir","sourceFileContent","sourceFilePath","packageJsonContent","TYPESCRIPT_PACKAGE_JSON","JAVASCRIPT_PACKAGE_JSON","packageJsonPath","tsconfigJsonPath","TYPESCRIPT_JSON_TEMPLATE","error","handleError","error","logger","initOptionsSchema","z","custom_action","init","Command","opts","options","cwd","path","existsSync","logger","config","promptForConfig","isJavascript","isDocker","isComposite","selectedComponents","promptForComponents","chalk","proceed","prompts","spinner","ora","targetDir","prepareTargetDirectory","packageManager","getPackageManager","writeJavascriptActionFiles","execa","error","handleError","npm_package","skip","highlight","text","validateName","name","prev","main","packageInfo","getPackageInfo","program","Command","init"]}