{"version":3,"sources":["../src/index.ts","../src/utils/get-package-info.ts","../src/commands/init.ts","../src/utils/logger.ts","../src/utils/prompt-for-components.ts","../src/utils/prepare-target-dir.ts"],"sourcesContent":["import { Command } from \"commander\";\r\nimport { getPackageInfo } from \"./utils/get-package-info\";\r\nimport { init } from \"./commands/init\";\r\n\r\nprocess.on(\"SIGINT\", () => process.exit(0));\r\nprocess.on(\"SIGTERM\", () => process.exit(0));\r\n\r\nasync function main() {\r\n  const packageInfo = await getPackageInfo();\r\n  const program = new Command()\r\n    .name(\"custom-gh-action\")\r\n    .description(\"create custom github action\")\r\n    .version(\r\n      packageInfo.version || \"1.0.0\",\r\n      \"-v, --version\",\r\n      \"display the version number\"\r\n    );\r\n\r\n   program.addCommand(init); \r\n   program.parse()\r\n}\r\n\r\nmain()\r\n","import path from \"path\"\r\nimport fs from \"fs-extra\"\r\nimport { type PackageJson } from \"type-fest\"\r\n\r\nexport function getPackageInfo() {\r\n  const packageJsonPath = path.join(\"package.json\")\r\n\r\n  return fs.readJSONSync(packageJsonPath) as PackageJson\r\n}\r\n","import { existsSync, promises as fs, promises } from \"fs\";\r\nimport { Command } from \"commander\";\r\nimport path from \"path\";\r\nimport prompts from \"prompts\";\r\nimport { z } from \"zod\";\r\nimport { logger } from \"../utils/logger\";\r\nimport chalk from \"chalk\";\r\nimport { promptForComponents } from \"../utils/prompt-for-components\";\r\nimport ora from \"ora\";\r\nimport { prepareTargetDirectory } from \"../utils/prepare-target-dir\";\r\nimport { execa } from \"execa\"\r\n\r\nconst initOptionsSchema = z.object({\r\n  cwd: z.string(),\r\n  yes: z.boolean(),\r\n  name: z.optional(z.string()),\r\n});\r\n\r\nconst custom_action = [\r\n  {\r\n    name: \"javascript\",\r\n    label: \"JavaScript\",\r\n  },\r\n  {\r\n    name: \"docker\",\r\n    label: \"Docker\",\r\n  },\r\n  {\r\n    name: \"composite\",\r\n    label: \"Composite\",\r\n  },\r\n]\r\n\r\nconst dev_dependencies = [\r\n  \"@types/nodes\",\r\n  \"typescript\"\r\n]\r\n\r\n\r\n\r\nexport const init = new Command()\r\n  .name(\"init\")\r\n  .description(\"initialize your project and install dependencies\")\r\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\r\n  .option(\r\n    \"-c, --cwd <cwd>\",\r\n    \"the working directory. defaults to the current directory.\",\r\n    process.cwd()\r\n  )\r\n  .option(\"-n, --name <name>\", \"the name of the github action.\", \"\")\r\n  .action(async (opts) => {\r\n    try {\r\n      const options = initOptionsSchema.parse(opts);\r\n      const cwd = path.resolve(options.cwd);\r\n\r\n      // Ensure target directory exists.\r\n      if (!existsSync(cwd)) {\r\n        logger.error(`The path ${cwd} does not exist. Please try again.`);\r\n        process.exit(1);\r\n      }\r\n\r\n      const config = await promptForConfig(cwd);\r\n      // Prompt for JavaScript components (if JavaScript is selected)\r\n      const isJavascript = config.custom_action === \"javascript\";\r\n      if (isJavascript) {\r\n        const selectedComponents: string[] | undefined = await promptForComponents(isJavascript);\r\n        console.log(\"ðŸš€ ~ .action ~ selectedComponents:\", selectedComponents)\r\n\r\n        if (!selectedComponents?.length) {\r\n          logger.warn(\"No components selected. Exiting.\")\r\n          process.exit(0)\r\n        }\r\n\r\n        if (!options.yes) {\r\n          const { proceed } = await prompts({\r\n            type: \"confirm\",\r\n            name: \"proceed\",\r\n            message: `Ready to install components and dependencies. Proceed?`,\r\n            initial: true,\r\n          })\r\n\r\n          if (!proceed) {\r\n            process.exit(0)\r\n          }\r\n        }\r\n\r\n        const spinner = ora(`Installing components...`).start()\r\n        const targetDir = path.join(\r\n          // Use provided cwd if available, otherwise default to process.cwd()\r\n          options.cwd || process.cwd(),\r\n          config.action_name\r\n        );\r\n        await prepareTargetDirectory(targetDir);\r\n\r\n        // Installation code within the for loop\r\n      for (const npm_package of selectedComponents) {\r\n        spinner.text = `Installing ${npm_package}...`;\r\n\r\n        try {\r\n          // Install package using execaCommand with target directory\r\n          await execaCommand(\"npm\", [\"install\", npm_package], { cwd: targetDir });\r\n        } catch (error) {\r\n          logger.error(`Failed to install ${npm_package}: ${error}`);\r\n        }\r\n      }\r\n      \r\n      }\r\n\r\n      logger.info(\"\");\r\n      logger.info(\r\n        `${chalk.green(\r\n          \"Success!\"\r\n        )} Project initialization completed. You may now add components.`\r\n      );\r\n      logger.info(\"\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  });\r\n\r\nexport async function promptForConfig(cwd: string, skip = false) {\r\n  const highlight = (text: string) => chalk.cyan(text);\r\n\r\n\r\n  const validateName = (name: string) => {\r\n    // Adjusted regular expression to allow underscores and hyphens\r\n    const isValid = /^[a-zA-Z0-9_-]+$/.test(name);\r\n\r\n    if (!isValid) {\r\n      console.log(\"Invalid name. The name must not contain special characters or spaces, except for underscores and hyphens.\");\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const options = await prompts([\r\n    {\r\n      type: \"text\",\r\n      name: \"action_name\",\r\n      message: `What is the name of your action? `,\r\n      validate: (name: string) => validateName(name)\r\n    },\r\n    {\r\n      type: \"select\",\r\n      name: \"custom_action\",\r\n      message: `Which ${highlight(\"custom action\")} would you like to use?`,\r\n      choices: custom_action.map((custom_action) => ({\r\n        title: custom_action.label,\r\n        value: custom_action.name,\r\n      })),\r\n    },\r\n    {\r\n      type: (prev) => (prev === \"javascript\" ? \"toggle\" : null),\r\n      name: \"typescript\",\r\n      message: `Would you like to use ${highlight(\r\n        \"TypeScript\"\r\n      )} (recommended)?`,\r\n      initial: true,\r\n      active: \"yes\",\r\n      inactive: \"no\",\r\n    }\r\n  ]);\r\n\r\n\r\n  if (!skip && options.custom_action !== \"javascript\") {\r\n    const { proceed } = await prompts({\r\n      type: \"confirm\",\r\n      name: \"proceed\",\r\n      message: `Do you want to ${highlight(\r\n        \"proceed\"\r\n      )}. Proceed?`,\r\n      initial: true,\r\n    })\r\n\r\n    if (!proceed) {\r\n      process.exit(0)\r\n    }\r\n  }\r\n\r\n  return options;\r\n}\r\n","import chalk from \"chalk\"\r\n\r\nexport const logger = {\r\n  error(...args: unknown[]) {\r\n    console.log(chalk.red(...args))\r\n  },\r\n  warn(...args: unknown[]) {\r\n    console.log(chalk.yellow(...args))\r\n  },\r\n  info(...args: unknown[]) {\r\n    console.log(chalk.cyan(...args))\r\n  },\r\n  success(...args: unknown[]) {\r\n    console.log(chalk.green(...args))\r\n  },\r\n  break() {\r\n    console.log(\"\")\r\n  },\r\n}\r\n","import prompts from \"prompts\"\n\nconst dependencies = [\n    \"@octokit/core\",\n    \"@actions/core\",\n    \"@actions/github\",\n    \"axios\",\n    \"node-fetch\"\n]\n\nexport async function promptForComponents(isJavascript: boolean) {\n    if (!isJavascript) {\n        return; // No components prompt for non-JavaScript actions\n    }\n\n    const choices = dependencies.map((entry) => ({\n        title: entry,\n        value: entry,\n        selected: false, // Initially deselect all components\n    }));\n\n    const response = await prompts({\n        type: \"multiselect\",\n        name: \"components\",\n        message: \"Which packages would you like to add?\",\n        hint: \"Space to select. A to toggle all. Enter to submit.\",\n        instructions: false,\n        choices,\n    });\n\n    return response.components; // Return the selected components\n}","import { existsSync,promises } from \"fs\";\nimport { logger } from \"./logger\";\n\nexport async function prepareTargetDirectory(targetDir: string) {\n    if (existsSync(targetDir)) {\n      logger.error(`The path ${targetDir} already exists. Please try again.`);\n      process.exit(1);\n    }\n  \n    await promises.mkdir(targetDir);\n  \n    const files = await promises.readdir(targetDir);\n    if (files.length > 0) {\n      logger.error(`Target directory ${targetDir} is not empty. Please try again.`);\n      process.exit(1);\n    }\n  \n    process.chdir(targetDir); // Change working directory\n  }"],"mappings":"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","names":["Command","path","fs","getPackageInfo","packageJsonPath","existsSync","Command","path","prompts","z","chalk","logger","args","chalk","prompts","dependencies","promptForComponents","isJavascript","choices","entry","ora","existsSync","promises","prepareTargetDirectory","targetDir","existsSync","logger","promises","initOptionsSchema","z","custom_action","init","Command","opts","options","initOptionsSchema","cwd","path","existsSync","logger","config","promptForConfig","isJavascript","selectedComponents","promptForComponents","proceed","prompts","spinner","ora","targetDir","prepareTargetDirectory","npm_package","error","chalk","skip","highlight","text","validateName","name","custom_action","prev","main","packageInfo","getPackageInfo","program","Command","init"]}