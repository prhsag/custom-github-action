import{Command as W}from"commander";import P from"path";import S from"fs-extra";function f(){let e=P.join("package.json");return S.readJSONSync(e)}import{existsSync as T}from"fs";import{Command as _}from"commander";import w from"path";import d from"prompts";import{z as c}from"zod";import m from"chalk";var r={error(...e){console.log(m.red(...e))},warn(...e){console.log(m.yellow(...e))},info(...e){console.log(m.cyan(...e))},success(...e){console.log(m.green(...e))},break(){console.log("")}};import k from"chalk";import j from"prompts";var $=["@octokit/core","@actions/core","@actions/github","axios","node-fetch"];async function u(e){if(!e)return;let o=$.map(a=>({title:a,value:a,selected:!1}));return(await j({type:"multiselect",name:"components",message:"Which packages would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:o})).components}import J from"ora";import{existsSync as C,promises as l}from"fs";async function y(e){let o=await l.readdir(e);C(e)?(await l.readdir(e)).length>0&&(r.error(`Target directory ${e} is not empty. Please try again.`),process.exit(1)):await l.mkdir(e),process.chdir(e)}import{execa as M}from"execa";import{detect as I}from"@antfu/ni";async function h(e){let o=await I({programmatic:!0,cwd:e});return o==="yarn@berry"?"yarn":o==="pnpm@6"?"pnpm":o==="bun"?"bun":o??"npm"}var z=c.object({cwd:c.string(),yes:c.boolean(),name:c.optional(c.string())}),F=[{name:"javascript",label:"JavaScript"},{name:"docker",label:"Docker"},{name:"composite",label:"Composite"}];var x=new _().name("init").description("initialize your project and install dependencies").option("-y, --yes","skip confirmation prompt.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-n, --name <name>","the name of the github action.","").action(async e=>{try{let o=z.parse(e),n=w.resolve(o.cwd);T(n)||(r.error(`The path ${n} does not exist. Please try again.`),process.exit(1));let a=await N(n),i=a.custom_action==="javascript";if(i){let t=await u(i);if(console.log("\u{1F680} ~ .action ~ selectedComponents:",t),t?.length||(r.warn("No components selected. Exiting."),process.exit(0)),!o.yes){let{proceed:s}=await d({type:"confirm",name:"proceed",message:"Ready to install components and dependencies. Proceed?",initial:!0});s||process.exit(0)}let g=J("Installing components...").start(),p=w.join(o.cwd||process.cwd(),a.action_name);await y(p);let v=await h(n||p);for(let s of t){g.text=`Installing ${s}...`,console.log("\u{1F680} ~ .action ~ targetDir:",p);try{await M(v,["install",s],{cwd:p})}catch(b){r.error(`Failed to install ${s}: ${b}`)}}}r.info(""),r.info(`${k.green("Success!")} Project initialization completed. You may now add components.`),r.info("")}catch(o){console.log(o)}});async function N(e,o=!1){let n=t=>k.cyan(t),a=t=>/^[a-zA-Z0-9_-]+$/.test(t)?!0:(console.log("Invalid name. The name must not contain special characters or spaces, except for underscores and hyphens."),!1),i=await d([{type:"text",name:"action_name",message:"What is the name of your action? ",validate:t=>a(t)},{type:"select",name:"custom_action",message:`Which ${n("custom action")} would you like to use?`,choices:F.map(t=>({title:t.label,value:t.name}))},{type:t=>t==="javascript"?"toggle":null,name:"typescript",message:`Would you like to use ${n("TypeScript")} (recommended)?`,initial:!0,active:"yes",inactive:"no"}]);if(!o&&i.custom_action!=="javascript"){let{proceed:t}=await d({type:"confirm",name:"proceed",message:`Do you want to ${n("proceed")}. Proceed?`,initial:!0});t||process.exit(0)}return i}process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));async function E(){let e=await f(),o=new W().name("custom-gh-action").description("create custom github action").version(e.version||"1.0.0","-v, --version","display the version number");o.addCommand(x),o.parse()}E();
//# sourceMappingURL=index.js.map