import{Command as z}from"commander";import v from"path";import b from"fs-extra";function f(){let e=v.join("package.json");return b.readJSONSync(e)}import{existsSync as j}from"fs";import{Command as C}from"commander";import h from"path";import m from"prompts";import{z as c}from"zod";import p from"chalk";var n={error(...e){console.log(p.red(...e))},warn(...e){console.log(p.yellow(...e))},info(...e){console.log(p.cyan(...e))},success(...e){console.log(p.green(...e))},break(){console.log("")}};import w from"chalk";import P from"prompts";var S=["@octokit/core","@actions/core","@actions/github","axios","node-fetch"];async function g(e){if(!e)return;let t=S.map(i=>({title:i,value:i,selected:!1}));return(await P({type:"multiselect",name:"components",message:"Which packages would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:t})).components}import I from"ora";import{existsSync as $,promises as u}from"fs";async function y(e){$(e)&&(n.error(`The path ${e} already exists. Please try again.`),process.exit(1)),await u.mkdir(e),(await u.readdir(e)).length>0&&(n.error(`Target directory ${e} is not empty. Please try again.`),process.exit(1)),process.chdir(e)}var T=c.object({cwd:c.string(),yes:c.boolean(),name:c.optional(c.string())}),_=[{name:"javascript",label:"JavaScript"},{name:"docker",label:"Docker"},{name:"composite",label:"Composite"}];var k=new C().name("init").description("initialize your project and install dependencies").option("-y, --yes","skip confirmation prompt.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-n, --name <name>","the name of the github action.","").action(async e=>{try{let t=T.parse(e),s=h.resolve(t.cwd);j(s)||(n.error(`The path ${s} does not exist. Please try again.`),process.exit(1));let i=await J(s),r=i.custom_action==="javascript";if(r){let o=await g(r);if(console.log("\u{1F680} ~ .action ~ selectedComponents:",o),o?.length||(n.warn("No components selected. Exiting."),process.exit(0)),!t.yes){let{proceed:a}=await m({type:"confirm",name:"proceed",message:"Ready to install components and dependencies. Proceed?",initial:!0});a||process.exit(0)}let l=I("Installing components...").start(),d=h.join(t.cwd||process.cwd(),i.action_name);await y(d);for(let a of o){l.text=`Installing ${a}...`;try{await execaCommand("npm",["install",a],{cwd:d})}catch(x){n.error(`Failed to install ${a}: ${x}`)}}}n.info(""),n.info(`${w.green("Success!")} Project initialization completed. You may now add components.`),n.info("")}catch(t){console.log(t)}});async function J(e,t=!1){let s=o=>w.cyan(o),i=o=>/^[a-zA-Z0-9_-]+$/.test(o)?!0:(console.log("Invalid name. The name must not contain special characters or spaces, except for underscores and hyphens."),!1),r=await m([{type:"text",name:"action_name",message:"What is the name of your action? ",validate:o=>i(o)},{type:"select",name:"custom_action",message:`Which ${s("custom action")} would you like to use?`,choices:_.map(o=>({title:o.label,value:o.name}))},{type:o=>o==="javascript"?"toggle":null,name:"typescript",message:`Would you like to use ${s("TypeScript")} (recommended)?`,initial:!0,active:"yes",inactive:"no"}]);if(!t&&r.custom_action!=="javascript"){let{proceed:o}=await m({type:"confirm",name:"proceed",message:`Do you want to ${s("proceed")}. Proceed?`,initial:!0});o||process.exit(0)}return r}process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));async function F(){let e=await f(),t=new z().name("custom-gh-action").description("create custom github action").version(e.version||"1.0.0","-v, --version","display the version number");t.addCommand(k),t.parse()}F();
//# sourceMappingURL=index.js.map